# 1. 코드 작성 규칙
- 세미콜론: 생략가능하나 문장 끝에 추가 추천
- 주석 (comment): 사람용, 불필요하거나
임시테스트용 소스코드를 적용/미적용
 - 2종류
     -한줄짜리: // 주석내용
     -여러줄짜리: /* 주석내용 */
-들여쓰기(indent): 하는 것을 권장, 가독성

# 자료형(Data Type)
-값(Value)
-값의 종류


# 자료형 1: 문자열(String)
- 문자열 만들기 3가지 방법
    - 1 '': '안녕'
    - 2 "": "안녕"
    - 3 ``(백틱): Tab키 위, `안녕`
        - 템플릿 문자열
        - let i =100; `${i} 값 출력함`; //let i = x; 변수 선언
- 주의사항 : 같은 종류의 기호로 시작, 끝나야함
- '', ' '는 다름
    - '': 빈문자열
    - ' ': 공백문자열
- typeof 연산자: 자료형을 알려주는 연산자
    - typeof 데이터(값-리터널, 변수값)
- 문자열에서 문자열 생성 기호('',"",``)를 넣어서 사용하려면 //2가지 방법 있음 
    - 다른 종류의 문자열 생성 기호 사용
        - "Kim's family"
        - '영희는 "안녕"이라고 말했다'
    - Escape Sequence사용(\+문자)
        -'Kim\'s family'
- 문자열 합치기: + 연산자
    - '문자열1' + '문자열2'

# 자료형 2: 숫자(number)
- 정수 (interger)
    - 자연수(양의정수): 1234
    - 0
    - 음수(음의정수): -1234
- 소수 (실수, float, real number)
    - 123.456
    - 지수표기법: e===> 10
        - 1.23456e ===> 1.23456 * 10^2 // 10^2 = 10의2승
        - 1.23456e+2
        - 1.23456e-2 ===> 1.23456 * 10^-2 // 10^-2 = 10의-2승 100분의 1을 곱한것과 같다
- 1234와 "1234"는 다름
    - 1234 == "1234" ---> true
    - 1234 === "1234" ---> false
- 진법
    - 10진법(decimal): 0~9
    - 2진법(binary): 0, 1
        - 0b0, 0b1, 0b10 ... 0, 1, 2
    - 8진법(octal): 0~7, 10진수 8---> 10
        - 0o0, 0o1, 0o10 ... 0, 1 ,8 // 0o12= 10 
    - 16진법(hexadecimal): 0~9, A(10)~F(15)
        - 0x1f, 0x1A, 0x0F ... 31, 10, 15
- 사용자의 입력은 무조건 문자열이라 생각해야
- 사용자 입력은 prompt() 함수 이용
    - prompt()결과는 무조건 문자열 자료형이다.
    - 숫자를 입력받을려면 변환해야 함
        - parseInt()
            - parseInt(prompt()); // 실수입력시 정수로 변환
            - parseInt(문자열,숫자): 숫자에 해당하는 진법으로 처리 parseInt("123",10); ==> 123
        - parseFloat()
            -parseFloat(prompt());
- NaN : Not a Number --- 숫자 아님
    - tpyeof NaN; === "number" ---> false
- 산술 연산자
    - 가감승제: +, -, *, /
    - 나머지: %
    - 거듭제곱: **
- 무한대 : Infinity: 양의 무한대, 음의 무한대
    - 1000/0
    - typeof Infinity; == number    
- 문자열+숫자, 숫자+문자열ㅁ
    - 숫자가 문자열로 변환한 뒤 + 적용
    - "123" + 456; ---> "123456"
- 문자열-숫자: 숫자를 문자열로 변환한 뒤 - 적용
    - "123" - 456; ---> -333 , 123-"456" ---> -333


# 연산자 우선순위
  - 산술 연산
    - */% 높고 -+낮다
      - 3+4*5
    - = . +=,-=, /= , *= ... : 대입 연산자는 우선순위 거의 최하급
    - 최상위 연산자 ()


# 부동 소수점 문제
    - 0.1 + 0.2 = 0.3이 아님.
      - 이 문제를 해결하려면
      - (0.1*10+0.2*10)/10 = 0.3

# 자료형 : 불 값(boolean)
    - true ---> 1 
    - false ---> 0
      - on, off : 참 , 거짓
    - 비교연산자와 논리연산자의 결과값.
    - > , < , >= , <=
    - &&(and) ||(or) !(not) 
    - == vs ===  != vs !===
       - === 은 값,자료형을 비교한다.
       - 1 == '1' -->true
       - 1 ==='1' --> false
       - 문자열 비교는 사전순이다.

    XOR , NOR , NAND
    
    -false가 되는 값.
      - !!undefined (undefined형)
      - !!null (Object형)
      - !!0  
      - !!NaN (Number)
      - !!false
      - !! : 연산자?
        - !!피연산자 --> 피 연산자의 불값으로 변경 ( not not이니까.)

2번째시간

# 변수(variable)
    - 말 그대로 변하는 수
    - 메모리에 생성
       - 스택, 힙
       - 기본자료형: 스택, 참조자료형: 힙에 생성
    
    - 선언
     - let, const, var(old style)
     - let 변수명;
       - 변수의 값 --> undefined
     - 초기화 후
     - 사용 : 읽고 쓰기
    
     - let은 변수 재 할당 가능
     let a = 100
     a = 2 ---> o


     - 상수(constant) : 항상 같은 수
       - 변경x , 1회 초기화 가능
       - 초기화 , 할당을 동시에 해야함.
       - 예외 : 객체의 속성값은 변경 가능.

# 조건문

 -if문
 -if-else문
 -if-else if ~else문
 -예제
   - if(조건){
       실행문
   }
   switch(조건식){
       case 비교조건값1:
       실행문1 ...
       break;
       case 비교조건값2:
       실행문1 ...
       break;
   }